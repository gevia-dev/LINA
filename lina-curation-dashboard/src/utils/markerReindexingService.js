/**
 * MarkerReindexingService - Sistema autom√°tico de reindexa√ß√£o de marcadores
 * 
 * Este servi√ßo detecta quando texto √© inserido entre marcadores existentes
 * e executa reindexa√ß√£o autom√°tica para manter a integridade da sequ√™ncia num√©rica.
 * 
 * Funcionalidades principais:
 * - Detectar inser√ß√µes entre marcadores existentes
 * - Executar reindexa√ß√£o autom√°tica de marcadores subsequentes
 * - Atualizar referenceMapping para manter sincroniza√ß√£o t√≠tulo ‚Üî marcador
 * - Aplicar mudan√ßas no editor de forma segura
 */

/**
 * Estrutura de dados para contexto de inser√ß√£o
 * @typedef {Object} InsertionContext
 * @property {number} insertionPosition - Posi√ß√£o onde texto foi inserido
 * @property {string} newMarker - Novo marcador gerado
 * @property {number} newMarkerNumber - N√∫mero do novo marcador
 * @property {Array} existingMarkers - Marcadores existentes no texto
 * @property {boolean} needsReindexing - Se reindexa√ß√£o √© necess√°ria
 * @property {Object} affectedRange - Range de marcadores afetados
 * @property {Object} insertionType - Tipo de inser√ß√£o detectada
 * @property {Array} markersToReindex - Lista espec√≠fica de marcadores que precisam ser reindexados
 */

/**
 * Estrutura de dados para marcador extra√≠do
 * @typedef {Object} ExtractedMarker
 * @property {number} number - N√∫mero do marcador
 * @property {string} text - Texto completo do marcador (ex: "[17]")
 * @property {number} position - Posi√ß√£o no texto onde o marcador foi encontrado
 * @property {number} endPosition - Posi√ß√£o final do marcador no texto
 */

/**
 * Estrutura de dados para mapeamento de reindexa√ß√£o
 * @typedef {Object} ReindexingMap
 * @property {string} oldMarker - Marcador antigo (ex: "[17]")
 * @property {string} newMarker - Marcador novo (ex: "[18]")
 * @property {string} title - T√≠tulo do conte√∫do
 * @property {number} position - Posi√ß√£o no texto
 */

/**
 * Estrutura de dados para backup do estado
 * @typedef {Object} StateBackup
 * @property {string} originalContent - Conte√∫do original do editor
 * @property {Map} originalReferenceMapping - Mapeamento original t√≠tulo ‚Üî marcador
 * @property {number} cursorPosition - Posi√ß√£o original do cursor
 * @property {number} timestamp - Timestamp do backup
 * @property {string} operationId - ID √∫nico da opera√ß√£o
 * @property {Object} editorState - Estado adicional do editor
 */

/**
 * Estrutura de dados para resultado de opera√ß√£o com rollback
 * @typedef {Object} RollbackableResult
 * @property {boolean} success - Se a opera√ß√£o foi bem-sucedida
 * @property {*} result - Resultado da opera√ß√£o (se sucesso)
 * @property {Error} error - Erro ocorrido (se falha)
 * @property {StateBackup} backup - Backup do estado para rollback
 * @property {Function} rollback - Fun√ß√£o para reverter a opera√ß√£o
 * @property {Object} validation - Resultado da valida√ß√£o p√≥s-opera√ß√£o
 */

export class MarkerReindexingService {
  
  /**
   * Extrai todos os marcadores [n] de um texto
   * @param {string} text - Texto para extrair marcadores
   * @returns {Array<ExtractedMarker>} Array de marcadores extra√≠dos
   */
  static extractAllMarkers(text) {
    try {
      console.log('üîç Extraindo todos os marcadores do texto');
      
      if (!text || typeof text !== 'string') {
        console.log('‚ùå Texto inv√°lido para extra√ß√£o de marcadores');
        return [];
      }
      
      const markerRegex = /\[(\d+)\]/g;
      const extractedMarkers = [];
      let match;
      
      while ((match = markerRegex.exec(text)) !== null) {
        const markerNumber = parseInt(match[1]);
        const markerText = match[0]; // "[n]"
        const startPosition = match.index;
        const endPosition = match.index + match[0].length;
        
        extractedMarkers.push({
          number: markerNumber,
          text: markerText,
          position: startPosition,
          endPosition: endPosition
        });
      }
      
      // Ordenar marcadores por posi√ß√£o no texto
      extractedMarkers.sort((a, b) => a.position - b.position);
      
      console.log(`üìä ${extractedMarkers.length} marcadores extra√≠dos:`);
      extractedMarkers.forEach((marker, index) => {
        console.log(`  ${index + 1}. ${marker.text} (n√∫mero: ${marker.number}, posi√ß√£o: ${marker.position}-${marker.endPosition})`);
      });
      
      return extractedMarkers;
      
    } catch (error) {
      console.error('‚ùå Erro ao extrair marcadores:', error);
      return [];
    }
  }
  
  /**
   * Determina posi√ß√£o de inser√ß√£o relativa aos marcadores existentes
   * @param {number} insertionPosition - Posi√ß√£o onde texto foi inserido
   * @param {Array<ExtractedMarker>} existingMarkers - Marcadores existentes ordenados por posi√ß√£o
   * @returns {Object} Informa√ß√µes sobre a posi√ß√£o relativa da inser√ß√£o
   */
  static determineInsertionPosition(insertionPosition, existingMarkers) {
    try {
      console.log(`üéØ Determinando posi√ß√£o relativa da inser√ß√£o na posi√ß√£o ${insertionPosition}`);
      
      if (!existingMarkers || existingMarkers.length === 0) {
        return {
          type: 'no_markers',
          description: 'Nenhum marcador existente',
          beforeMarker: null,
          afterMarker: null,
          needsReindexing: false
        };
      }
      
      // Verificar se inser√ß√£o ocorreu antes do primeiro marcador
      const firstMarker = existingMarkers[0];
      if (insertionPosition < firstMarker.position) {
        console.log(`üìç Inser√ß√£o antes do primeiro marcador ${firstMarker.text}`);
        return {
          type: 'before_first',
          description: `Inser√ß√£o antes do primeiro marcador ${firstMarker.text}`,
          beforeMarker: null,
          afterMarker: firstMarker,
          needsReindexing: true,
          affectedMarkers: existingMarkers // Todos os marcadores precisam ser reindexados
        };
      }
      
      // Verificar se inser√ß√£o ocorreu ap√≥s o √∫ltimo marcador
      const lastMarker = existingMarkers[existingMarkers.length - 1];
      if (insertionPosition > lastMarker.endPosition) {
        console.log(`üìç Inser√ß√£o ap√≥s o √∫ltimo marcador ${lastMarker.text}`);
        return {
          type: 'after_last',
          description: `Inser√ß√£o ap√≥s o √∫ltimo marcador ${lastMarker.text}`,
          beforeMarker: lastMarker,
          afterMarker: null,
          needsReindexing: false
        };
      }
      
      // Verificar se inser√ß√£o ocorreu entre dois marcadores
      for (let i = 0; i < existingMarkers.length - 1; i++) {
        const currentMarker = existingMarkers[i];
        const nextMarker = existingMarkers[i + 1];
        
        if (insertionPosition > currentMarker.endPosition && insertionPosition < nextMarker.position) {
          console.log(`üìç Inser√ß√£o entre ${currentMarker.text} e ${nextMarker.text}`);
          
          // Marcadores que precisam ser reindexados (a partir do pr√≥ximo marcador)
          const affectedMarkers = existingMarkers.slice(i + 1);
          
          return {
            type: 'between_markers',
            description: `Inser√ß√£o entre ${currentMarker.text} e ${nextMarker.text}`,
            beforeMarker: currentMarker,
            afterMarker: nextMarker,
            needsReindexing: true,
            affectedMarkers: affectedMarkers
          };
        }
      }
      
      // Verificar se inser√ß√£o ocorreu dentro de um marcador (caso edge)
      for (const marker of existingMarkers) {
        if (insertionPosition >= marker.position && insertionPosition <= marker.endPosition) {
          console.log(`‚ö†Ô∏è Inser√ß√£o dentro do marcador ${marker.text} - caso especial`);
          return {
            type: 'inside_marker',
            description: `Inser√ß√£o dentro do marcador ${marker.text}`,
            beforeMarker: marker,
            afterMarker: marker,
            needsReindexing: false, // N√£o reindexar se inser√ß√£o for dentro do marcador
            warning: 'Inser√ß√£o dentro de marcador pode causar problemas'
          };
        }
      }
      
      console.log('‚ùì Posi√ß√£o de inser√ß√£o n√£o classificada - assumindo sem reindexa√ß√£o');
      return {
        type: 'unclassified',
        description: 'Posi√ß√£o de inser√ß√£o n√£o classificada',
        beforeMarker: null,
        afterMarker: null,
        needsReindexing: false
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao determinar posi√ß√£o de inser√ß√£o:', error);
      return {
        type: 'error',
        description: 'Erro ao determinar posi√ß√£o',
        needsReindexing: false,
        error: error.message
      };
    }
  }
  
  /**
   * Identifica range de marcadores que precisam ser reindexados
   * @param {Array<ExtractedMarker>} existingMarkers - Marcadores existentes
   * @param {Object} insertionInfo - Informa√ß√µes sobre a posi√ß√£o de inser√ß√£o
   * @param {number} newMarkerNumber - N√∫mero do novo marcador
   * @returns {Object} Range de marcadores para reindexa√ß√£o
   */
  static identifyReindexingRange(existingMarkers, insertionInfo, newMarkerNumber) {
    try {
      console.log('üìä Identificando range de marcadores para reindexa√ß√£o');
      
      if (!insertionInfo.needsReindexing) {
        console.log('‚ÑπÔ∏è Reindexa√ß√£o n√£o necess√°ria');
        return {
          needsReindexing: false,
          startNumber: null,
          endNumber: null,
          markersToReindex: [],
          newMarkerFinalNumber: newMarkerNumber
        };
      }
      
      const { type, affectedMarkers } = insertionInfo;
      
      if (!affectedMarkers || affectedMarkers.length === 0) {
        console.log('‚ÑπÔ∏è Nenhum marcador afetado');
        return {
          needsReindexing: false,
          startNumber: null,
          endNumber: null,
          markersToReindex: [],
          newMarkerFinalNumber: newMarkerNumber
        };
      }
      
      // Determinar n√∫meros inicial e final do range
      const markerNumbers = affectedMarkers.map(m => m.number).sort((a, b) => a - b);
      const startNumber = Math.min(...markerNumbers);
      const endNumber = Math.max(...markerNumbers);
      
      // Determinar n√∫mero final correto para o novo marcador
      let newMarkerFinalNumber;
      
      if (type === 'before_first') {
        // Novo marcador deve ser [1], todos os outros incrementam
        newMarkerFinalNumber = 1;
      } else if (type === 'between_markers') {
        // Novo marcador deve ocupar a posi√ß√£o do pr√≥ximo marcador
        newMarkerFinalNumber = startNumber;
      } else {
        // Manter n√∫mero original se n√£o h√° conflito
        newMarkerFinalNumber = newMarkerNumber;
      }
      
      console.log(`üìä Range identificado:`);
      console.log(`  - Tipo de inser√ß√£o: ${type}`);
      console.log(`  - Marcadores afetados: ${markerNumbers.join(', ')}`);
      console.log(`  - Range num√©rico: ${startNumber} at√© ${endNumber}`);
      console.log(`  - Novo marcador: [${newMarkerNumber}] -> [${newMarkerFinalNumber}]`);
      
      return {
        needsReindexing: true,
        startNumber,
        endNumber,
        markersToReindex: affectedMarkers,
        newMarkerFinalNumber,
        insertionType: type,
        totalAffected: affectedMarkers.length
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao identificar range de reindexa√ß√£o:', error);
      return {
        needsReindexing: false,
        error: error.message
      };
    }
  }
  
  /**
   * Detecta se inser√ß√£o ocorreu entre marcadores existentes
   * @param {string} editorContent - Conte√∫do atual do editor
   * @param {number} insertionPosition - Posi√ß√£o onde texto foi inserido
   * @param {string} newMarker - Novo marcador gerado (ex: "[18]")
   * @returns {InsertionContext|null} Contexto da inser√ß√£o ou null se n√£o precisa reindexar
   */
  static detectInsertionBetweenMarkers(editorContent, insertionPosition, newMarker) {
    try {
      console.log('üîç MarkerReindexingService - Detectando inser√ß√£o entre marcadores');
      console.log(`üìç Posi√ß√£o de inser√ß√£o: ${insertionPosition}, Novo marcador: ${newMarker}`);
      
      if (!editorContent || typeof editorContent !== 'string') {
        console.log('‚ùå Conte√∫do do editor inv√°lido');
        return null;
      }
      
      // Extrair n√∫mero do novo marcador
      const newMarkerMatch = newMarker.match(/\[(\d+)\]/);
      if (!newMarkerMatch) {
        console.log('‚ùå Formato de marcador inv√°lido:', newMarker);
        return null;
      }
      
      const newMarkerNumber = parseInt(newMarkerMatch[1]);
      console.log(`üî¢ N√∫mero do novo marcador: ${newMarkerNumber}`);
      
      // 1. Extrair todos os marcadores existentes no texto
      const existingMarkers = this.extractAllMarkers(editorContent);
      
      if (existingMarkers.length === 0) {
        console.log('‚ÑπÔ∏è Nenhum marcador existente - reindexa√ß√£o n√£o necess√°ria');
        return null;
      }
      
      // 2. Determinar posi√ß√£o de inser√ß√£o relativa aos marcadores existentes
      const insertionInfo = this.determineInsertionPosition(insertionPosition, existingMarkers);
      
      if (!insertionInfo.needsReindexing) {
        console.log(`‚ÑπÔ∏è ${insertionInfo.description} - reindexa√ß√£o n√£o necess√°ria`);
        return null;
      }
      
      // 3. Identificar range de marcadores que precisam ser reindexados
      const reindexingRange = this.identifyReindexingRange(existingMarkers, insertionInfo, newMarkerNumber);
      
      if (!reindexingRange.needsReindexing) {
        console.log('‚ÑπÔ∏è Range de reindexa√ß√£o vazio - reindexa√ß√£o n√£o necess√°ria');
        return null;
      }
      
      // 4. Criar estrutura InsertionContext completa
      const insertionContext = {
        insertionPosition,
        newMarker,
        newMarkerNumber,
        existingMarkers,
        needsReindexing: true,
        affectedRange: {
          start: reindexingRange.startNumber,
          end: reindexingRange.endNumber
        },
        insertionType: {
          type: insertionInfo.type,
          description: insertionInfo.description,
          beforeMarker: insertionInfo.beforeMarker,
          afterMarker: insertionInfo.afterMarker
        },
        markersToReindex: reindexingRange.markersToReindex,
        newMarkerFinalNumber: reindexingRange.newMarkerFinalNumber,
        totalAffectedMarkers: reindexingRange.totalAffected
      };
      
      console.log('‚úÖ Contexto de inser√ß√£o completo criado:');
      console.log(`  - Tipo: ${insertionContext.insertionType.type}`);
      console.log(`  - Descri√ß√£o: ${insertionContext.insertionType.description}`);
      console.log(`  - Marcadores a reindexar: ${insertionContext.totalAffectedMarkers}`);
      console.log(`  - Range afetado: [${insertionContext.affectedRange.start}] at√© [${insertionContext.affectedRange.end}]`);
      console.log(`  - Novo marcador: [${newMarkerNumber}] -> [${insertionContext.newMarkerFinalNumber}]`);
      
      return insertionContext;
      
    } catch (error) {
      console.error('‚ùå Erro ao detectar inser√ß√£o entre marcadores:', error);
      return null;
    }
  }
  
  /**
   * Implementa l√≥gica para reindexar apenas marcadores >= posi√ß√£o de inser√ß√£o
   * @param {Array<ExtractedMarker>} existingMarkers - Marcadores existentes ordenados
   * @param {number} insertionPosition - Posi√ß√£o onde texto foi inserido
   * @param {number} newMarkerNumber - N√∫mero do novo marcador
   * @returns {Array<ReindexingMap>} Array com mapeamento de reindexa√ß√£o
   */
  static generateSequentialReindexingMap(existingMarkers, insertionPosition, newMarkerNumber) {
    try {
      console.log('üî¢ Gerando mapeamento sequencial de reindexa√ß√£o');
      console.log(`üìç Posi√ß√£o de inser√ß√£o: ${insertionPosition}, Novo marcador: [${newMarkerNumber}]`);
      
      if (!existingMarkers || existingMarkers.length === 0) {
        console.log('‚ÑπÔ∏è Nenhum marcador existente para reindexar');
        return [];
      }
      
      const reindexingMap = [];
      
      // Encontrar marcadores que precisam ser reindexados (>= posi√ß√£o de inser√ß√£o)
      const markersToReindex = existingMarkers.filter(marker => {
        // Marcadores que est√£o na posi√ß√£o de inser√ß√£o ou depois dela
        return marker.position >= insertionPosition;
      });
      
      console.log(`üìä ${markersToReindex.length} marcadores precisam ser reindexados`);
      
      if (markersToReindex.length === 0) {
        console.log('‚ÑπÔ∏è Nenhum marcador >= posi√ß√£o de inser√ß√£o');
        return [];
      }
      
      // Ordenar marcadores por n√∫mero para garantir sequ√™ncia correta
      markersToReindex.sort((a, b) => a.number - b.number);
      
      // Determinar o n√∫mero inicial correto para o novo marcador
      const firstMarkerToReindex = markersToReindex[0];
      const newMarkerFinalNumber = firstMarkerToReindex.number;
      
      console.log(`üéØ Novo marcador [${newMarkerNumber}] ser√° reindexado para [${newMarkerFinalNumber}]`);
      
      // Adicionar mapeamento para o novo marcador se necess√°rio
      if (newMarkerNumber !== newMarkerFinalNumber) {
        reindexingMap.push({
          oldMarker: `[${newMarkerNumber}]`,
          newMarker: `[${newMarkerFinalNumber}]`,
          oldNumber: newMarkerNumber,
          newNumber: newMarkerFinalNumber,
          isNewMarker: true,
          position: insertionPosition
        });
      }
      
      // Gerar mapeamento para marcadores existentes (incrementar em 1)
      markersToReindex.forEach((marker, index) => {
        const oldNumber = marker.number;
        const newNumber = marker.number + 1; // Incrementar em 1
        
        reindexingMap.push({
          oldMarker: `[${oldNumber}]`,
          newMarker: `[${newNumber}]`,
          oldNumber,
          newNumber,
          position: marker.position,
          isExistingMarker: true
        });
        
        console.log(`üîÑ Mapeamento: [${oldNumber}] -> [${newNumber}] (posi√ß√£o: ${marker.position})`);
      });
      
      console.log(`‚úÖ Mapeamento sequencial gerado: ${reindexingMap.length} entradas`);
      return reindexingMap;
      
    } catch (error) {
      console.error('‚ùå Erro ao gerar mapeamento sequencial:', error);
      return [];
    }
  }
  
  /**
   * Cria fun√ß√£o para gerar novo conte√∫do com marcadores reindexados
   * @param {string} originalContent - Conte√∫do original
   * @param {Array<ReindexingMap>} reindexingMap - Mapeamento de reindexa√ß√£o
   * @returns {Object} Resultado com novo conte√∫do e estat√≠sticas
   */
  static generateReindexedContent(originalContent, reindexingMap) {
    try {
      console.log('üìù Gerando novo conte√∫do com marcadores reindexados');
      
      if (!originalContent || typeof originalContent !== 'string') {
        console.error('‚ùå Conte√∫do original inv√°lido');
        return { success: false, error: 'Conte√∫do inv√°lido' };
      }
      
      if (!reindexingMap || !Array.isArray(reindexingMap) || reindexingMap.length === 0) {
        console.log('‚ÑπÔ∏è Nenhuma reindexa√ß√£o necess√°ria');
        return { 
          success: true, 
          newContent: originalContent, 
          replacements: 0,
          processedMarkers: []
        };
      }
      
      let newContent = originalContent;
      const processedMarkers = [];
      let totalReplacements = 0;
      
      // Processar mapeamentos em ordem decrescente de n√∫mero antigo para evitar conflitos
      const sortedMap = [...reindexingMap].sort((a, b) => b.oldNumber - a.oldNumber);
      
      console.log(`üîÑ Processando ${sortedMap.length} mapeamentos em ordem decrescente`);
      
      sortedMap.forEach((mapping, index) => {
        const { oldMarker, newMarker, oldNumber, newNumber } = mapping;
        
        console.log(`üîÑ [${index + 1}/${sortedMap.length}] Processando: ${oldMarker} -> ${newMarker}`);
        
        // Criar regex para substitui√ß√£o exata do marcador
        const regex = new RegExp(`\\[${oldNumber}\\]`, 'g');
        const beforeReplace = newContent;
        
        // Realizar substitui√ß√£o
        newContent = newContent.replace(regex, newMarker);
        
        // Contar substitui√ß√µes realizadas
        const replacements = (beforeReplace.match(regex) || []).length;
        totalReplacements += replacements;
        
        if (replacements > 0) {
          console.log(`‚úÖ ${replacements} ocorr√™ncia(s) de ${oldMarker} substitu√≠da(s) por ${newMarker}`);
          
          processedMarkers.push({
            ...mapping,
            replacements,
            processed: true
          });
        } else {
          console.warn(`‚ö†Ô∏è Nenhuma ocorr√™ncia encontrada para ${oldMarker}`);
          
          processedMarkers.push({
            ...mapping,
            replacements: 0,
            processed: false,
            warning: 'Marcador n√£o encontrado no conte√∫do'
          });
        }
      });
      
      console.log(`‚úÖ Conte√∫do reindexado gerado. Total de substitui√ß√µes: ${totalReplacements}`);
      
      return {
        success: true,
        newContent,
        replacements: totalReplacements,
        processedMarkers,
        originalLength: originalContent.length,
        newLength: newContent.length
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao gerar conte√∫do reindexado:', error);
      return { 
        success: false, 
        error: error.message,
        newContent: originalContent 
      };
    }
  }
  
  /**
   * Adiciona valida√ß√£o para garantir sequ√™ncia num√©rica correta
   * @param {string} content - Conte√∫do para validar
   * @param {boolean} strictMode - Se deve usar valida√ß√£o rigorosa
   * @returns {Object} Resultado detalhado da valida√ß√£o
   */
  static validateSequentialIntegrity(content, strictMode = true) {
    try {
      console.log('üîç Validando integridade sequencial dos marcadores');
      
      if (!content || typeof content !== 'string') {
        return {
          isValid: false,
          errors: ['Conte√∫do inv√°lido para valida√ß√£o'],
          warnings: [],
          markerCount: 0,
          sequence: [],
          gaps: [],
          duplicates: []
        };
      }
      
      // Extrair todos os marcadores
      const markerRegex = /\[(\d+)\]/g;
      const foundMarkers = [];
      let match;
      
      while ((match = markerRegex.exec(content)) !== null) {
        foundMarkers.push({
          number: parseInt(match[1]),
          text: match[0],
          position: match.index
        });
      }
      
      if (foundMarkers.length === 0) {
        return {
          isValid: true,
          errors: [],
          warnings: [],
          markerCount: 0,
          sequence: [],
          gaps: [],
          duplicates: [],
          message: 'Nenhum marcador encontrado'
        };
      }
      
      // Ordenar marcadores por n√∫mero
      const sortedMarkers = foundMarkers.sort((a, b) => a.number - b.number);
      const markerNumbers = sortedMarkers.map(m => m.number);
      
      console.log(`üìä ${foundMarkers.length} marcadores encontrados: [${markerNumbers.join(', ')}]`);
      
      const errors = [];
      const warnings = [];
      const gaps = [];
      const duplicates = [];
      
      // Verificar duplicatas
      const numberCounts = {};
      markerNumbers.forEach(num => {
        numberCounts[num] = (numberCounts[num] || 0) + 1;
      });
      
      Object.entries(numberCounts).forEach(([num, count]) => {
        if (count > 1) {
          duplicates.push(parseInt(num));
          errors.push(`Marcador [${num}] aparece ${count} vezes`);
        }
      });
      
      // Verificar se sequ√™ncia come√ßa em 1
      const firstMarker = Math.min(...markerNumbers);
      if (strictMode && firstMarker !== 1) {
        if (firstMarker > 1) {
          errors.push(`Sequ√™ncia deve come√ßar em [1], mas come√ßa em [${firstMarker}]`);
        } else {
          errors.push(`Marcador inv√°lido [${firstMarker}] - n√∫meros devem ser >= 1`);
        }
      }
      
      // Verificar continuidade da sequ√™ncia
      const uniqueNumbers = [...new Set(markerNumbers)].sort((a, b) => a - b);
      
      for (let i = 0; i < uniqueNumbers.length - 1; i++) {
        const current = uniqueNumbers[i];
        const next = uniqueNumbers[i + 1];
        const expectedNext = current + 1;
        
        if (next !== expectedNext) {
          const gap = { start: current, end: next, missing: [] };
          
          // Identificar n√∫meros faltantes
          for (let missing = expectedNext; missing < next; missing++) {
            gap.missing.push(missing);
          }
          
          gaps.push(gap);
          
          if (strictMode) {
            errors.push(`Gap na sequ√™ncia: ap√≥s [${current}] esperado [${expectedNext}], encontrado [${next}]`);
          } else {
            warnings.push(`Gap na sequ√™ncia: n√∫meros faltantes ${gap.missing.map(n => `[${n}]`).join(', ')}`);
          }
        }
      }
      
      // Verificar ordem no texto (marcadores devem aparecer em ordem crescente)
      const markersInTextOrder = foundMarkers.sort((a, b) => a.position - b.position);
      
      for (let i = 0; i < markersInTextOrder.length - 1; i++) {
        const current = markersInTextOrder[i];
        const next = markersInTextOrder[i + 1];
        
        if (current.number > next.number) {
          warnings.push(`Ordem no texto: [${current.number}] (pos: ${current.position}) aparece antes de [${next.number}] (pos: ${next.position})`);
        }
      }
      
      const isValid = errors.length === 0;
      
      console.log(`${isValid ? '‚úÖ' : '‚ùå'} Valida√ß√£o ${isValid ? 'aprovada' : 'reprovada'}`);
      if (errors.length > 0) {
        console.log('‚ùå Erros encontrados:', errors);
      }
      if (warnings.length > 0) {
        console.log('‚ö†Ô∏è Avisos:', warnings);
      }
      
      return {
        isValid,
        errors,
        warnings,
        markerCount: foundMarkers.length,
        sequence: markerNumbers,
        uniqueSequence: uniqueNumbers,
        gaps,
        duplicates,
        firstMarker,
        lastMarker: Math.max(...markerNumbers),
        expectedCount: uniqueNumbers.length > 0 ? Math.max(...markerNumbers) : 0
      };
      
    } catch (error) {
      console.error('‚ùå Erro na valida√ß√£o sequencial:', error);
      return {
        isValid: false,
        errors: [`Erro na valida√ß√£o: ${error.message}`],
        warnings: [],
        markerCount: 0,
        sequence: [],
        gaps: [],
        duplicates: []
      };
    }
  }
  
  /**
   * Executa reindexa√ß√£o autom√°tica dos marcadores ap√≥s inser√ß√£o
   * @param {string} editorContent - Conte√∫do atual do editor
   * @param {InsertionContext} insertionContext - Contexto da inser√ß√£o
   * @returns {Object} Resultado da reindexa√ß√£o com novo conte√∫do e mapeamento
   */
  static reindexMarkersAfterInsertion(editorContent, insertionContext) {
    try {
      console.log('üîÑ MarkerReindexingService - Executando reindexa√ß√£o sequencial autom√°tica');
      
      if (!editorContent || !insertionContext || !insertionContext.needsReindexing) {
        console.log('‚ùå Par√¢metros inv√°lidos para reindexa√ß√£o');
        return null;
      }
      
      const { insertionPosition, newMarkerNumber, existingMarkers } = insertionContext;
      
      console.log(`üîÑ Iniciando reindexa√ß√£o sequencial:`);
      console.log(`  - Posi√ß√£o de inser√ß√£o: ${insertionPosition}`);
      console.log(`  - Novo marcador: [${newMarkerNumber}]`);
      console.log(`  - Marcadores existentes: ${existingMarkers.length}`);
      
      // 1. Gerar mapeamento sequencial de reindexa√ß√£o
      const reindexingMap = this.generateSequentialReindexingMap(
        existingMarkers, 
        insertionPosition, 
        newMarkerNumber
      );
      
      if (reindexingMap.length === 0) {
        console.log('‚ÑπÔ∏è Nenhuma reindexa√ß√£o necess√°ria');
        return {
          success: true,
          newContent: editorContent,
          reindexingMap: [],
          affectedMarkersCount: 0,
          validation: { isValid: true, message: 'Nenhuma altera√ß√£o necess√°ria' }
        };
      }
      
      // 2. Gerar novo conte√∫do com marcadores reindexados
      const contentResult = this.generateReindexedContent(editorContent, reindexingMap);
      
      if (!contentResult.success) {
        console.error('‚ùå Falha ao gerar conte√∫do reindexado:', contentResult.error);
        return null;
      }
      
      // 3. Validar integridade da sequ√™ncia ap√≥s reindexa√ß√£o
      const validationResult = this.validateSequentialIntegrity(contentResult.newContent, true);
      
      if (!validationResult.isValid) {
        console.warn('‚ö†Ô∏è Sequ√™ncia com problemas ap√≥s reindexa√ß√£o:', validationResult.errors);
        // Continuar mesmo com warnings - pode ser v√°lido dependendo do contexto
      }
      
      console.log(`‚úÖ Reindexa√ß√£o sequencial conclu√≠da:`);
      console.log(`  - Marcadores processados: ${reindexingMap.length}`);
      console.log(`  - Substitui√ß√µes realizadas: ${contentResult.replacements}`);
      console.log(`  - Valida√ß√£o: ${validationResult.isValid ? 'Aprovada' : 'Com avisos'}`);
      
      return {
        success: true,
        newContent: contentResult.newContent,
        reindexingMap,
        affectedMarkersCount: reindexingMap.length,
        totalReplacements: contentResult.replacements,
        processedMarkers: contentResult.processedMarkers,
        validation: validationResult,
        sequentialIntegrity: validationResult.isValid
      };
      
    } catch (error) {
      console.error('‚ùå Erro durante reindexa√ß√£o sequencial autom√°tica:', error);
      return null;
    }
  }
  
  /**
   * Atualiza referenceMapping para sincronizar mapeamento t√≠tulo ‚Üî marcador
   * @param {Map} oldMapping - Mapeamento atual (bidirecional)
   * @param {Array} reindexingMap - Array com mapeamento de reindexa√ß√£o
   * @returns {Map} Novo mapeamento atualizado
   */
  static updateReferenceMapping(oldMapping, reindexingMap) {
    try {
      console.log('üó∫Ô∏è MarkerReindexingService - Atualizando referenceMapping');
      
      if (!oldMapping || !(oldMapping instanceof Map)) {
        console.log('‚ùå ReferenceMapping inv√°lido');
        return new Map();
      }
      
      if (!reindexingMap || !Array.isArray(reindexingMap)) {
        console.log('‚ùå ReindexingMap inv√°lido');
        return oldMapping;
      }
      
      // Criar novo mapeamento baseado no antigo
      const newMapping = new Map(oldMapping);
      
      console.log(`üìä Processando ${reindexingMap.length} mudan√ßas no mapeamento`);
      console.log(`üìä Mapeamento atual tem ${oldMapping.size} entradas`);
      
      // Processar cada mudan√ßa no mapeamento
      reindexingMap.forEach((change, index) => {
        const { oldMarker, newMarker, isNewMarkerAdjustment } = change;
        
        console.log(`üîÑ [${index + 1}/${reindexingMap.length}] Processando: ${oldMarker} -> ${newMarker}`);
        
        // Encontrar t√≠tulo associado ao marcador antigo
        let titleForMarker = null;
        
        // Buscar t√≠tulo que mapeia para o marcador antigo
        for (const [key, value] of oldMapping.entries()) {
          if (value === oldMarker) {
            titleForMarker = key;
            break;
          }
        }
        
        if (titleForMarker) {
          console.log(`üìù T√≠tulo encontrado para ${oldMarker}: "${titleForMarker}"`);
          
          // Remover mapeamento antigo (t√≠tulo -> marcador)
          newMapping.delete(titleForMarker);
          
          // Remover mapeamento reverso antigo (marcador -> t√≠tulo)
          newMapping.delete(oldMarker);
          
          // Adicionar novos mapeamentos
          newMapping.set(titleForMarker, newMarker); // t√≠tulo -> novo marcador
          newMapping.set(newMarker, titleForMarker); // novo marcador -> t√≠tulo
          
          console.log(`‚úÖ Mapeamento atualizado: "${titleForMarker}" <-> ${newMarker}`);
        } else {
          console.log(`‚ö†Ô∏è T√≠tulo n√£o encontrado para marcador ${oldMarker}`);
          
          // Se √© ajuste do novo marcador, pode n√£o ter t√≠tulo ainda
          if (isNewMarkerAdjustment) {
            console.log('‚ÑπÔ∏è Ajuste de novo marcador - t√≠tulo ser√° adicionado posteriormente');
          }
        }
      });
      
      console.log(`‚úÖ ReferenceMapping atualizado. Entradas: ${oldMapping.size} -> ${newMapping.size}`);
      
      // Log detalhado das mudan√ßas
      const addedEntries = [];
      const removedEntries = [];
      const changedEntries = [];
      
      // Identificar entradas removidas
      for (const [key, value] of oldMapping.entries()) {
        if (!newMapping.has(key)) {
          removedEntries.push(`${key} -> ${value}`);
        } else if (newMapping.get(key) !== value) {
          changedEntries.push(`${key}: ${value} -> ${newMapping.get(key)}`);
        }
      }
      
      // Identificar entradas adicionadas
      for (const [key, value] of newMapping.entries()) {
        if (!oldMapping.has(key)) {
          addedEntries.push(`${key} -> ${value}`);
        }
      }
      
      if (removedEntries.length > 0) {
        console.log('üóëÔ∏è Entradas removidas:', removedEntries);
      }
      if (addedEntries.length > 0) {
        console.log('‚ûï Entradas adicionadas:', addedEntries);
      }
      if (changedEntries.length > 0) {
        console.log('üîÑ Entradas modificadas:', changedEntries);
      }
      
      return newMapping;
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar referenceMapping:', error);
      return oldMapping; // Retornar mapeamento original em caso de erro
    }
  }
  
  /**
   * Valida integridade da sequ√™ncia de marcadores (m√©todo legado - usa validateSequentialIntegrity)
   * @param {string} content - Conte√∫do para validar
   * @returns {Object} Resultado da valida√ß√£o
   */
  static validateMarkerSequence(content) {
    try {
      // Usar o novo m√©todo de valida√ß√£o mais robusto
      const detailedValidation = this.validateSequentialIntegrity(content, true);
      
      // Converter para formato legado para compatibilidade
      return {
        isValid: detailedValidation.isValid,
        errors: detailedValidation.errors,
        markerCount: detailedValidation.markerCount,
        sequence: detailedValidation.sequence,
        // Campos adicionais do novo m√©todo
        warnings: detailedValidation.warnings,
        gaps: detailedValidation.gaps,
        duplicates: detailedValidation.duplicates
      };
      
    } catch (error) {
      return {
        isValid: false,
        errors: [`Erro na valida√ß√£o: ${error.message}`],
        markerCount: 0,
        sequence: []
      };
    }
  }
  
  /**
   * Aplica mudan√ßas de reindexa√ß√£o no editor de forma segura
   * @param {Object} editor - Inst√¢ncia do editor
   * @param {string} newContent - Novo conte√∫do com marcadores reindexados
   * @param {Array} reindexingMap - Mapeamento de reindexa√ß√£o
   * @returns {boolean} Sucesso da opera√ß√£o
   */
  static applyReindexingToEditor(editor, newContent, reindexingMap) {
    try {
      console.log('üìù MarkerReindexingService - Aplicando reindexa√ß√£o no editor');
      
      if (!editor || !editor.replaceContent) {
        console.error('‚ùå Editor n√£o dispon√≠vel ou sem m√©todo replaceContent');
        return false;
      }
      
      if (!newContent || typeof newContent !== 'string') {
        console.error('‚ùå Novo conte√∫do inv√°lido');
        return false;
      }
      
      console.log(`üìù Aplicando novo conte√∫do (${newContent.length} caracteres)`);
      console.log(`üîÑ Processando ${reindexingMap.length} mudan√ßas de marcadores`);
      
      // Aplicar novo conte√∫do no editor
      const success = editor.replaceContent(newContent);
      
      if (success) {
        console.log('‚úÖ Conte√∫do aplicado com sucesso no editor');
        
        // Log das mudan√ßas aplicadas
        reindexingMap.forEach((change, index) => {
          console.log(`‚úÖ [${index + 1}] ${change.oldMarker} -> ${change.newMarker}`);
        });
        
        return true;
      } else {
        console.error('‚ùå Falha ao aplicar conte√∫do no editor');
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao aplicar reindexa√ß√£o no editor:', error);
      return false;
    }
  }

  // ==================== ERROR HANDLING & ROLLBACK SYSTEM ====================

  /**
   * Cria backup completo do estado antes da reindexa√ß√£o
   * @param {Object} editor - Inst√¢ncia do editor
   * @param {Map} referenceMapping - Mapeamento atual t√≠tulo ‚Üî marcador
   * @param {string} operationId - ID √∫nico da opera√ß√£o
   * @returns {StateBackup} Backup do estado atual
   */
  static createStateBackup(editor, referenceMapping, operationId = null) {
    try {
      console.log('üíæ Criando backup do estado antes da reindexa√ß√£o');
      
      const timestamp = Date.now();
      const backupId = operationId || `reindex_${timestamp}_${Math.random().toString(36).substr(2, 9)}`;
      
      // Obter conte√∫do atual do editor
      let originalContent = '';
      let cursorPosition = 0;
      let editorState = {};
      
      if (editor) {
        try {
          // Tentar diferentes m√©todos para obter conte√∫do
          if (typeof editor.getContent === 'function') {
            originalContent = editor.getContent();
          } else if (typeof editor.getText === 'function') {
            originalContent = editor.getText();
          } else if (editor.content) {
            originalContent = editor.content;
          } else if (editor.innerHTML) {
            originalContent = editor.innerHTML;
          }
          
          // Tentar obter posi√ß√£o do cursor
          if (typeof editor.getCursorPosition === 'function') {
            cursorPosition = editor.getCursorPosition();
          } else if (editor.selectionStart !== undefined) {
            cursorPosition = editor.selectionStart;
          }
          
          // Capturar estado adicional do editor
          editorState = {
            scrollTop: editor.scrollTop || 0,
            scrollLeft: editor.scrollLeft || 0,
            selection: editor.getSelection ? editor.getSelection() : null,
            focus: document.activeElement === editor
          };
          
        } catch (editorError) {
          console.warn('‚ö†Ô∏è Erro ao capturar estado do editor:', editorError.message);
        }
      }
      
      // Criar c√≥pia profunda do referenceMapping
      let originalReferenceMapping = new Map();
      if (referenceMapping && referenceMapping instanceof Map) {
        try {
          originalReferenceMapping = new Map(referenceMapping);
        } catch (mappingError) {
          console.warn('‚ö†Ô∏è Erro ao copiar referenceMapping:', mappingError.message);
        }
      }
      
      const backup = {
        operationId: backupId,
        timestamp,
        originalContent,
        originalReferenceMapping,
        cursorPosition,
        editorState,
        contentLength: originalContent.length,
        mappingSize: originalReferenceMapping.size
      };
      
      console.log(`üíæ Backup criado com sucesso:`);
      console.log(`  - ID: ${backupId}`);
      console.log(`  - Conte√∫do: ${originalContent.length} caracteres`);
      console.log(`  - Mapeamento: ${originalReferenceMapping.size} entradas`);
      console.log(`  - Cursor: posi√ß√£o ${cursorPosition}`);
      
      return backup;
      
    } catch (error) {
      console.error('‚ùå Erro ao criar backup do estado:', error);
      
      // Retornar backup m√≠nimo em caso de erro
      return {
        operationId: operationId || `error_backup_${Date.now()}`,
        timestamp: Date.now(),
        originalContent: '',
        originalReferenceMapping: new Map(),
        cursorPosition: 0,
        editorState: {},
        error: error.message,
        isErrorBackup: true
      };
    }
  }

  /**
   * Executa rollback autom√°tico para estado anterior
   * @param {StateBackup} backup - Backup do estado para restaurar
   * @param {Object} editor - Inst√¢ncia do editor
   * @param {Function} setReferenceMapping - Fun√ß√£o para atualizar referenceMapping
   * @returns {boolean} Sucesso do rollback
   */
  static executeRollback(backup, editor, setReferenceMapping) {
    try {
      console.log('üîÑ Executando rollback autom√°tico');
      console.log(`üîÑ Restaurando estado da opera√ß√£o: ${backup.operationId}`);
      
      if (!backup || backup.isErrorBackup) {
        console.error('‚ùå Backup inv√°lido ou corrompido para rollback');
        return false;
      }
      
      let rollbackSuccess = true;
      const errors = [];
      
      // 1. Restaurar conte√∫do do editor
      if (editor && backup.originalContent !== undefined) {
        try {
          console.log(`üìù Restaurando conte√∫do do editor (${backup.originalContent.length} caracteres)`);
          
          if (typeof editor.replaceContent === 'function') {
            const contentRestored = editor.replaceContent(backup.originalContent);
            if (!contentRestored) {
              errors.push('Falha ao restaurar conte√∫do via replaceContent');
            }
          } else if (typeof editor.setContent === 'function') {
            editor.setContent(backup.originalContent);
          } else if (editor.innerHTML !== undefined) {
            editor.innerHTML = backup.originalContent;
          } else {
            errors.push('M√©todo para restaurar conte√∫do n√£o encontrado');
          }
          
          console.log('‚úÖ Conte√∫do do editor restaurado');
          
        } catch (contentError) {
          errors.push(`Erro ao restaurar conte√∫do: ${contentError.message}`);
          rollbackSuccess = false;
        }
      }
      
      // 2. Restaurar referenceMapping
      if (setReferenceMapping && typeof setReferenceMapping === 'function') {
        try {
          console.log(`üó∫Ô∏è Restaurando referenceMapping (${backup.originalReferenceMapping.size} entradas)`);
          
          setReferenceMapping(backup.originalReferenceMapping);
          console.log('‚úÖ ReferenceMapping restaurado');
          
        } catch (mappingError) {
          errors.push(`Erro ao restaurar referenceMapping: ${mappingError.message}`);
          rollbackSuccess = false;
        }
      }
      
      // 3. Restaurar posi√ß√£o do cursor
      if (editor && backup.cursorPosition !== undefined) {
        try {
          if (typeof editor.setCursorPosition === 'function') {
            editor.setCursorPosition(backup.cursorPosition);
          } else if (editor.selectionStart !== undefined) {
            editor.selectionStart = backup.cursorPosition;
            editor.selectionEnd = backup.cursorPosition;
          }
          
          console.log(`‚úÖ Posi√ß√£o do cursor restaurada: ${backup.cursorPosition}`);
          
        } catch (cursorError) {
          console.warn('‚ö†Ô∏è Erro ao restaurar cursor:', cursorError.message);
          // N√£o considerar erro cr√≠tico
        }
      }
      
      // 4. Restaurar estado adicional do editor
      if (editor && backup.editorState) {
        try {
          const { scrollTop, scrollLeft, focus } = backup.editorState;
          
          if (scrollTop !== undefined) editor.scrollTop = scrollTop;
          if (scrollLeft !== undefined) editor.scrollLeft = scrollLeft;
          if (focus && typeof editor.focus === 'function') editor.focus();
          
          console.log('‚úÖ Estado adicional do editor restaurado');
          
        } catch (stateError) {
          console.warn('‚ö†Ô∏è Erro ao restaurar estado adicional:', stateError.message);
          // N√£o considerar erro cr√≠tico
        }
      }
      
      if (rollbackSuccess && errors.length === 0) {
        console.log('‚úÖ Rollback executado com sucesso');
        return true;
      } else {
        console.error('‚ùå Rollback parcialmente falhou:', errors);
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå Erro cr√≠tico durante rollback:', error);
      return false;
    }
  }

  /**
   * Valida integridade completa ap√≥s reindexa√ß√£o
   * @param {string} content - Conte√∫do ap√≥s reindexa√ß√£o
   * @param {Map} referenceMapping - Mapeamento ap√≥s reindexa√ß√£o
   * @param {Array} reindexingMap - Mapeamento de mudan√ßas aplicadas
   * @returns {Object} Resultado detalhado da valida√ß√£o
   */
  static validatePostReindexingIntegrity(content, referenceMapping, reindexingMap) {
    try {
      console.log('üîç Validando integridade completa ap√≥s reindexa√ß√£o');
      
      const validationResult = {
        isValid: true,
        errors: [],
        warnings: [],
        checks: {
          sequentialIntegrity: null,
          mappingConsistency: null,
          reindexingAccuracy: null,
          contentIntegrity: null
        }
      };
      
      // 1. Validar integridade sequencial dos marcadores
      console.log('üîç Verificando integridade sequencial...');
      const sequentialCheck = this.validateSequentialIntegrity(content, true);
      validationResult.checks.sequentialIntegrity = sequentialCheck;
      
      if (!sequentialCheck.isValid) {
        validationResult.isValid = false;
        validationResult.errors.push(...sequentialCheck.errors);
      }
      if (sequentialCheck.warnings.length > 0) {
        validationResult.warnings.push(...sequentialCheck.warnings);
      }
      
      // 2. Validar consist√™ncia do referenceMapping
      console.log('üîç Verificando consist√™ncia do mapeamento...');
      const mappingCheck = this.validateReferenceMappingConsistency(content, referenceMapping);
      validationResult.checks.mappingConsistency = mappingCheck;
      
      if (!mappingCheck.isValid) {
        validationResult.isValid = false;
        validationResult.errors.push(...mappingCheck.errors);
      }
      if (mappingCheck.warnings.length > 0) {
        validationResult.warnings.push(...mappingCheck.warnings);
      }
      
      // 3. Validar precis√£o da reindexa√ß√£o
      console.log('üîç Verificando precis√£o da reindexa√ß√£o...');
      const reindexingCheck = this.validateReindexingAccuracy(content, reindexingMap);
      validationResult.checks.reindexingAccuracy = reindexingCheck;
      
      if (!reindexingCheck.isValid) {
        validationResult.isValid = false;
        validationResult.errors.push(...reindexingCheck.errors);
      }
      if (reindexingCheck.warnings.length > 0) {
        validationResult.warnings.push(...reindexingCheck.warnings);
      }
      
      // 4. Validar integridade geral do conte√∫do
      console.log('üîç Verificando integridade geral do conte√∫do...');
      const contentCheck = this.validateContentIntegrity(content);
      validationResult.checks.contentIntegrity = contentCheck;
      
      if (!contentCheck.isValid) {
        validationResult.isValid = false;
        validationResult.errors.push(...contentCheck.errors);
      }
      if (contentCheck.warnings.length > 0) {
        validationResult.warnings.push(...contentCheck.warnings);
      }
      
      // Resumo da valida√ß√£o
      const totalErrors = validationResult.errors.length;
      const totalWarnings = validationResult.warnings.length;
      
      console.log(`${validationResult.isValid ? '‚úÖ' : '‚ùå'} Valida√ß√£o p√≥s-reindexa√ß√£o:`);
      console.log(`  - Integridade sequencial: ${sequentialCheck.isValid ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - Consist√™ncia do mapeamento: ${mappingCheck.isValid ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - Precis√£o da reindexa√ß√£o: ${reindexingCheck.isValid ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - Integridade do conte√∫do: ${contentCheck.isValid ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - Total de erros: ${totalErrors}`);
      console.log(`  - Total de avisos: ${totalWarnings}`);
      
      return validationResult;
      
    } catch (error) {
      console.error('‚ùå Erro durante valida√ß√£o p√≥s-reindexa√ß√£o:', error);
      return {
        isValid: false,
        errors: [`Erro na valida√ß√£o: ${error.message}`],
        warnings: [],
        checks: {}
      };
    }
  }

  /**
   * Valida consist√™ncia entre conte√∫do e referenceMapping
   * @param {string} content - Conte√∫do para validar
   * @param {Map} referenceMapping - Mapeamento t√≠tulo ‚Üî marcador
   * @returns {Object} Resultado da valida√ß√£o de consist√™ncia
   */
  static validateReferenceMappingConsistency(content, referenceMapping) {
    try {
      console.log('üîç Validando consist√™ncia do referenceMapping');
      
      const result = {
        isValid: true,
        errors: [],
        warnings: [],
        stats: {
          markersInContent: 0,
          markersInMapping: 0,
          orphanedMarkers: [],
          missingMarkers: [],
          bidirectionalErrors: []
        }
      };
      
      if (!referenceMapping || !(referenceMapping instanceof Map)) {
        result.errors.push('ReferenceMapping inv√°lido ou n√£o √© uma inst√¢ncia de Map');
        result.isValid = false;
        return result;
      }
      
      // Extrair marcadores do conte√∫do
      const contentMarkers = this.extractAllMarkers(content);
      const contentMarkerTexts = contentMarkers.map(m => m.text);
      result.stats.markersInContent = contentMarkers.length;
      
      // Extrair marcadores do mapping
      const mappingMarkers = [];
      const titles = [];
      
      for (const [key, value] of referenceMapping.entries()) {
        if (typeof key === 'string' && key.match(/^\[(\d+)\]$/)) {
          // key √© um marcador
          mappingMarkers.push(key);
        } else if (typeof value === 'string' && value.match(/^\[(\d+)\]$/)) {
          // value √© um marcador
          mappingMarkers.push(value);
          titles.push(key);
        }
      }
      
      const uniqueMappingMarkers = [...new Set(mappingMarkers)];
      result.stats.markersInMapping = uniqueMappingMarkers.length;
      
      // Verificar marcadores √≥rf√£os (no conte√∫do mas n√£o no mapping)
      contentMarkerTexts.forEach(marker => {
        if (!uniqueMappingMarkers.includes(marker)) {
          result.stats.orphanedMarkers.push(marker);
          result.warnings.push(`Marcador ${marker} existe no conte√∫do mas n√£o no referenceMapping`);
        }
      });
      
      // Verificar marcadores faltantes (no mapping mas n√£o no conte√∫do)
      uniqueMappingMarkers.forEach(marker => {
        if (!contentMarkerTexts.includes(marker)) {
          result.stats.missingMarkers.push(marker);
          result.warnings.push(`Marcador ${marker} existe no referenceMapping mas n√£o no conte√∫do`);
        }
      });
      
      // Verificar integridade bidirecional do mapping
      for (const [key, value] of referenceMapping.entries()) {
        if (typeof value === 'string' && value.match(/^\[(\d+)\]$/)) {
          // key √© t√≠tulo, value √© marcador
          const reverseValue = referenceMapping.get(value);
          if (reverseValue !== key) {
            result.stats.bidirectionalErrors.push({ title: key, marker: value, reverseValue });
            result.errors.push(`Mapeamento bidirecional quebrado: "${key}" -> ${value}, mas ${value} -> "${reverseValue}"`);
            result.isValid = false;
          }
        }
      }
      
      console.log(`üìä Consist√™ncia do mapeamento:`);
      console.log(`  - Marcadores no conte√∫do: ${result.stats.markersInContent}`);
      console.log(`  - Marcadores no mapping: ${result.stats.markersInMapping}`);
      console.log(`  - Marcadores √≥rf√£os: ${result.stats.orphanedMarkers.length}`);
      console.log(`  - Marcadores faltantes: ${result.stats.missingMarkers.length}`);
      console.log(`  - Erros bidirecionais: ${result.stats.bidirectionalErrors.length}`);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Erro na valida√ß√£o de consist√™ncia:', error);
      return {
        isValid: false,
        errors: [`Erro na valida√ß√£o: ${error.message}`],
        warnings: [],
        stats: {}
      };
    }
  }

  /**
   * Valida se a reindexa√ß√£o foi aplicada corretamente
   * @param {string} content - Conte√∫do ap√≥s reindexa√ß√£o
   * @param {Array} reindexingMap - Mapeamento de mudan√ßas aplicadas
   * @returns {Object} Resultado da valida√ß√£o de precis√£o
   */
  static validateReindexingAccuracy(content, reindexingMap) {
    try {
      console.log('üîç Validando precis√£o da reindexa√ß√£o');
      
      const result = {
        isValid: true,
        errors: [],
        warnings: [],
        stats: {
          expectedChanges: reindexingMap.length,
          appliedChanges: 0,
          failedChanges: [],
          unexpectedMarkers: []
        }
      };
      
      if (!reindexingMap || !Array.isArray(reindexingMap)) {
        result.warnings.push('ReindexingMap n√£o fornecido - valida√ß√£o de precis√£o ignorada');
        return result;
      }
      
      // Verificar se cada mudan√ßa foi aplicada corretamente
      reindexingMap.forEach((change, index) => {
        const { oldMarker, newMarker } = change;
        
        // Verificar se o marcador antigo n√£o existe mais no conte√∫do
        const escapedOldMarker = oldMarker.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const oldMarkerRegex = new RegExp(escapedOldMarker, 'g');
        const oldMarkerMatches = (content.match(oldMarkerRegex) || []).length;
        
        // Verificar se o novo marcador existe no conte√∫do
        const escapedNewMarker = newMarker.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const newMarkerRegex = new RegExp(escapedNewMarker, 'g');
        const newMarkerMatches = (content.match(newMarkerRegex) || []).length;
        
        if (oldMarkerMatches > 0) {
          result.stats.failedChanges.push({
            change,
            issue: 'old_marker_still_exists',
            oldMarkerCount: oldMarkerMatches
          });
          result.errors.push(`Marcador antigo ${oldMarker} ainda existe no conte√∫do (${oldMarkerMatches} ocorr√™ncias)`);
          result.isValid = false;
        }
        
        if (newMarkerMatches === 0) {
          result.stats.failedChanges.push({
            change,
            issue: 'new_marker_not_found',
            newMarkerCount: newMarkerMatches
          });
          result.errors.push(`Novo marcador ${newMarker} n√£o encontrado no conte√∫do`);
          result.isValid = false;
        } else {
          result.stats.appliedChanges++;
        }
      });
      
      // Verificar se h√° marcadores inesperados no conte√∫do
      const allMarkers = this.extractAllMarkers(content);
      const expectedMarkers = reindexingMap.map(change => change.newMarker);
      
      allMarkers.forEach(marker => {
        const wasExpected = expectedMarkers.includes(marker.text) || 
                           reindexingMap.some(change => change.oldMarker === marker.text);
        
        if (!wasExpected) {
          result.stats.unexpectedMarkers.push(marker.text);
          result.warnings.push(`Marcador inesperado encontrado: ${marker.text}`);
        }
      });
      
      console.log(`üìä Precis√£o da reindexa√ß√£o:`);
      console.log(`  - Mudan√ßas esperadas: ${result.stats.expectedChanges}`);
      console.log(`  - Mudan√ßas aplicadas: ${result.stats.appliedChanges}`);
      console.log(`  - Mudan√ßas falhadas: ${result.stats.failedChanges.length}`);
      console.log(`  - Marcadores inesperados: ${result.stats.unexpectedMarkers.length}`);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Erro na valida√ß√£o de precis√£o:', error);
      return {
        isValid: false,
        errors: [`Erro na valida√ß√£o: ${error.message}`],
        warnings: [],
        stats: {}
      };
    }
  }

  /**
   * Valida integridade geral do conte√∫do
   * @param {string} content - Conte√∫do para validar
   * @returns {Object} Resultado da valida√ß√£o de integridade
   */
  static validateContentIntegrity(content) {
    try {
      console.log('üîç Validando integridade geral do conte√∫do');
      
      const result = {
        isValid: true,
        errors: [],
        warnings: [],
        stats: {
          contentLength: content ? content.length : 0,
          markerCount: 0,
          malformedMarkers: [],
          duplicateMarkers: [],
          emptyContent: false
        }
      };
      
      if (typeof content !== 'string') {
        result.errors.push('Conte√∫do inv√°lido');
        result.isValid = false;
        return result;
      }
      
      // Verificar se conte√∫do est√° vazio
      if (content.length === 0) {
        result.warnings.push('Conte√∫do est√° vazio');
        result.stats.emptyContent = true;
      }
      
      // Verificar marcadores malformados
      const allMarkerMatches = content.match(/\[[^\]]*\]/g) || [];
      const validMarkerMatches = content.match(/\[\d+\]/g) || [];
      
      result.stats.markerCount = validMarkerMatches.length;
      
      allMarkerMatches.forEach(match => {
        if (!match.match(/^\[\d+\]$/)) {
          result.stats.malformedMarkers.push(match);
          result.warnings.push(`Marcador malformado encontrado: ${match}`);
        }
      });
      
      // Verificar marcadores duplicados
      const markerCounts = {};
      validMarkerMatches.forEach(marker => {
        markerCounts[marker] = (markerCounts[marker] || 0) + 1;
      });
      
      Object.entries(markerCounts).forEach(([marker, count]) => {
        if (count > 1) {
          result.stats.duplicateMarkers.push({ marker, count });
          result.errors.push(`Marcador duplicado: ${marker} aparece ${count} vezes`);
          result.isValid = false;
        }
      });
      

      
      console.log(`üìä Integridade do conte√∫do:`);
      console.log(`  - Tamanho: ${result.stats.contentLength} caracteres`);
      console.log(`  - Marcadores v√°lidos: ${result.stats.markerCount}`);
      console.log(`  - Marcadores malformados: ${result.stats.malformedMarkers.length}`);
      console.log(`  - Marcadores duplicados: ${result.stats.duplicateMarkers.length}`);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Erro na valida√ß√£o de integridade:', error);
      return {
        isValid: false,
        errors: [`Erro na valida√ß√£o: ${error.message}`],
        warnings: [],
        stats: {}
      };
    }
  }

  /**
   * Preserva funcionalidade b√°sica em caso de erro cr√≠tico
   * @param {Error} error - Erro ocorrido
   * @param {Object} context - Contexto da opera√ß√£o
   * @returns {Object} Estado de fallback seguro
   */
  static preserveBasicFunctionality(error, context = {}) {
    try {
      console.log('üõ°Ô∏è Preservando funcionalidade b√°sica ap√≥s erro cr√≠tico');
      console.error('‚ùå Erro original:', error.message);
      
      const fallbackState = {
        mode: 'fallback',
        timestamp: Date.now(),
        originalError: error.message,
        context,
        preservedFunctions: {
          basicEditing: true,
          markerDetection: false,
          reindexing: false,
          grifos: 'limited'
        },
        recommendations: [
          'Recarregar a p√°gina para restaurar funcionalidade completa',
          'Verificar console para detalhes do erro',
          'Salvar trabalho atual antes de continuar'
        ]
      };
      
      // Tentar preservar funcionalidades cr√≠ticas
      try {
        // Manter editor funcionando para edi√ß√£o b√°sica
        if (context.editor && typeof context.editor.enable === 'function') {
          context.editor.enable();
        }
        
        // Desabilitar funcionalidades que podem causar mais erros
        if (context.editor && typeof context.editor.disableReindexing === 'function') {
          context.editor.disableReindexing();
        }
        
        fallbackState.preservedFunctions.basicEditing = true;
        
      } catch (preservationError) {
        console.error('‚ùå Erro ao preservar funcionalidades b√°sicas:', preservationError);
        fallbackState.preservedFunctions.basicEditing = false;
      }
      
      console.log('üõ°Ô∏è Estado de fallback configurado:', fallbackState);
      return fallbackState;
      
    } catch (fallbackError) {
      console.error('‚ùå Erro cr√≠tico no sistema de fallback:', fallbackError);
      return {
        mode: 'critical_failure',
        timestamp: Date.now(),
        errors: [error.message, fallbackError.message]
      };
    }
  }

  /**
   * Executa valida√ß√£o de integridade com recupera√ß√£o autom√°tica
   * @param {string} content - Conte√∫do para validar
   * @param {Map} referenceMapping - Mapeamento para validar
   * @param {Object} options - Op√ß√µes de valida√ß√£o
   * @returns {Object} Resultado com tentativas de corre√ß√£o autom√°tica
   */
  static validateWithAutoRecovery(content, referenceMapping, options = {}) {
    try {
      console.log('üîç Executando valida√ß√£o com recupera√ß√£o autom√°tica');
      
      const {
        attemptAutoFix = true,
        strictMode = false,
        maxFixAttempts = 3
      } = options;
      
      let currentContent = content;
      let currentMapping = referenceMapping;
      let fixAttempts = 0;
      let fixesApplied = [];
      
      while (fixAttempts < maxFixAttempts) {
        // Executar valida√ß√£o completa
        const validation = this.validatePostReindexingIntegrity(
          currentContent, 
          currentMapping, 
          []
        );
        
        if (validation.isValid || !attemptAutoFix) {
          return {
            isValid: validation.isValid,
            errors: validation.errors,
            warnings: validation.warnings,
            fixesApplied,
            fixAttempts,
            finalContent: currentContent,
            finalMapping: currentMapping
          };
        }
        
        // Tentar corre√ß√µes autom√°ticas
        console.log(`üîß Tentativa de corre√ß√£o autom√°tica ${fixAttempts + 1}/${maxFixAttempts}`);
        
        let fixApplied = false;
        
        // Corre√ß√£o 1: Remover marcadores duplicados
        if (validation.checks.sequentialIntegrity && 
            validation.checks.sequentialIntegrity.duplicates.length > 0) {
          
          console.log('üîß Corrigindo marcadores duplicados...');
          const fixResult = this.fixDuplicateMarkers(currentContent);
          if (fixResult.success) {
            currentContent = fixResult.newContent;
            fixesApplied.push('duplicate_markers_removed');
            fixApplied = true;
          }
        }
        
        // Corre√ß√£o 2: Corrigir gaps na sequ√™ncia
        if (validation.checks.sequentialIntegrity && 
            validation.checks.sequentialIntegrity.gaps.length > 0 && 
            !strictMode) {
          
          console.log('üîß Corrigindo gaps na sequ√™ncia...');
          const fixResult = this.fixSequenceGaps(currentContent);
          if (fixResult.success) {
            currentContent = fixResult.newContent;
            fixesApplied.push('sequence_gaps_fixed');
            fixApplied = true;
          }
        }
        
        // Corre√ß√£o 3: Sincronizar referenceMapping
        if (validation.checks.mappingConsistency && 
            !validation.checks.mappingConsistency.isValid) {
          
          console.log('üîß Sincronizando referenceMapping...');
          const fixResult = this.syncReferenceMapping(currentContent, currentMapping);
          if (fixResult.success) {
            currentMapping = fixResult.newMapping;
            fixesApplied.push('mapping_synchronized');
            fixApplied = true;
          }
        }
        
        if (!fixApplied) {
          console.log('‚ö†Ô∏è Nenhuma corre√ß√£o autom√°tica dispon√≠vel');
          break;
        }
        
        fixAttempts++;
      }
      
      // Valida√ß√£o final
      const finalValidation = this.validatePostReindexingIntegrity(
        currentContent, 
        currentMapping, 
        []
      );
      
      return {
        isValid: finalValidation.isValid,
        errors: finalValidation.errors,
        warnings: finalValidation.warnings,
        fixesApplied,
        fixAttempts,
        finalContent: currentContent,
        finalMapping: currentMapping,
        autoRecoveryUsed: fixesApplied.length > 0
      };
      
    } catch (error) {
      console.error('‚ùå Erro durante valida√ß√£o com recupera√ß√£o autom√°tica:', error);
      return {
        isValid: false,
        errors: [`Erro na valida√ß√£o: ${error.message}`],
        warnings: [],
        fixesApplied: [],
        fixAttempts: 0
      };
    }
  }

  /**
   * Corrige marcadores duplicados no conte√∫do
   * @param {string} content - Conte√∫do com poss√≠veis duplicatas
   * @returns {Object} Resultado da corre√ß√£o
   */
  static fixDuplicateMarkers(content) {
    try {
      console.log('üîß Corrigindo marcadores duplicados');
      
      const markers = this.extractAllMarkers(content);
      const markerCounts = {};
      
      // Contar ocorr√™ncias de cada marcador
      markers.forEach(marker => {
        markerCounts[marker.text] = (markerCounts[marker.text] || 0) + 1;
      });
      
      // Identificar duplicatas
      const duplicates = Object.entries(markerCounts)
        .filter(([marker, count]) => count > 1)
        .map(([marker, count]) => ({ marker, count }));
      
      if (duplicates.length === 0) {
        return { success: true, newContent: content, duplicatesRemoved: 0 };
      }
      
      let newContent = content;
      let duplicatesRemoved = 0;
      
      // Remover duplicatas (manter apenas a primeira ocorr√™ncia)
      duplicates.forEach(({ marker }) => {
        const regex = new RegExp(`\\${marker}`, 'g');
        let firstOccurrence = true;
        
        newContent = newContent.replace(regex, (match) => {
          if (firstOccurrence) {
            firstOccurrence = false;
            return match; // Manter primeira ocorr√™ncia
          } else {
            duplicatesRemoved++;
            return ''; // Remover duplicatas
          }
        });
      });
      
      console.log(`‚úÖ ${duplicatesRemoved} marcadores duplicados removidos`);
      
      return {
        success: true,
        newContent,
        duplicatesRemoved,
        duplicatesFixed: duplicates.length
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao corrigir marcadores duplicados:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Corrige gaps na sequ√™ncia de marcadores
   * @param {string} content - Conte√∫do com poss√≠veis gaps
   * @returns {Object} Resultado da corre√ß√£o
   */
  static fixSequenceGaps(content) {
    try {
      console.log('üîß Corrigindo gaps na sequ√™ncia');
      
      const markers = this.extractAllMarkers(content);
      if (markers.length === 0) {
        return { success: true, newContent: content, gapsFixed: 0 };
      }
      
      // Ordenar marcadores por posi√ß√£o no texto
      const sortedMarkers = markers.sort((a, b) => a.position - b.position);
      
      let newContent = content;
      let gapsFixed = 0;
      
      // Renumerar sequencialmente a partir de 1
      sortedMarkers.forEach((marker, index) => {
        const expectedNumber = index + 1;
        const currentNumber = marker.number;
        
        if (currentNumber !== expectedNumber) {
          const oldMarker = `[${currentNumber}]`;
          const newMarker = `[${expectedNumber}]`;
          
          // Substituir apenas a primeira ocorr√™ncia na posi√ß√£o correta
          const beforeMarker = newContent.substring(0, marker.position);
          const afterMarker = newContent.substring(marker.position + oldMarker.length);
          
          newContent = beforeMarker + newMarker + afterMarker;
          gapsFixed++;
          
          console.log(`üîß Gap corrigido: ${oldMarker} -> ${newMarker}`);
        }
      });
      
      console.log(`‚úÖ ${gapsFixed} gaps na sequ√™ncia corrigidos`);
      
      return {
        success: true,
        newContent,
        gapsFixed,
        totalMarkers: sortedMarkers.length
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao corrigir gaps na sequ√™ncia:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Sincroniza referenceMapping com o conte√∫do atual
   * @param {string} content - Conte√∫do atual
   * @param {Map} referenceMapping - Mapeamento atual
   * @returns {Object} Resultado da sincroniza√ß√£o
   */
  static syncReferenceMapping(content, referenceMapping) {
    try {
      console.log('üîß Sincronizando referenceMapping com conte√∫do');
      
      const markers = this.extractAllMarkers(content);
      const contentMarkers = markers.map(m => m.text);
      
      const newMapping = new Map();
      let syncedEntries = 0;
      let removedEntries = 0;
      
      // Manter apenas entradas que correspondem a marcadores no conte√∫do
      for (const [key, value] of referenceMapping.entries()) {
        if (typeof value === 'string' && value.match(/^\[(\d+)\]$/)) {
          // key √© t√≠tulo, value √© marcador
          if (contentMarkers.includes(value)) {
            newMapping.set(key, value);
            newMapping.set(value, key);
            syncedEntries++;
          } else {
            removedEntries++;
            console.log(`üóëÔ∏è Removendo entrada √≥rf√£: "${key}" -> ${value}`);
          }
        }
      }
      
      console.log(`‚úÖ ReferenceMapping sincronizado:`);
      console.log(`  - Entradas mantidas: ${syncedEntries}`);
      console.log(`  - Entradas removidas: ${removedEntries}`);
      
      return {
        success: true,
        newMapping,
        syncedEntries,
        removedEntries
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao sincronizar referenceMapping:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Executa reindexa√ß√£o com sistema completo de error handling e rollback
   * @param {string} editorContent - Conte√∫do atual do editor
   * @param {InsertionContext} insertionContext - Contexto da inser√ß√£o
   * @param {Object} editor - Inst√¢ncia do editor
   * @param {Map} referenceMapping - Mapeamento atual t√≠tulo ‚Üî marcador
   * @param {Function} setReferenceMapping - Fun√ß√£o para atualizar referenceMapping
   * @returns {RollbackableResult} Resultado com capacidade de rollback
   */
  static reindexWithErrorHandling(editorContent, insertionContext, editor, referenceMapping, setReferenceMapping) {
    const operationId = `reindex_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    try {
      console.log('üõ°Ô∏è Iniciando reindexa√ß√£o com sistema de error handling');
      console.log(`üÜî ID da opera√ß√£o: ${operationId}`);
      
      // 1. Criar backup do estado atual
      console.log('üíæ Criando backup do estado...');
      const backup = this.createStateBackup(editor, referenceMapping, operationId);
      
      // 2. Executar reindexa√ß√£o normal
      console.log('üîÑ Executando reindexa√ß√£o...');
      const reindexResult = this.reindexMarkersAfterInsertion(editorContent, insertionContext);
      
      if (!reindexResult || !reindexResult.success) {
        console.error('‚ùå Falha na reindexa√ß√£o - executando rollback');
        
        const rollbackSuccess = this.executeRollback(backup, editor, setReferenceMapping);
        
        return {
          success: false,
          error: new Error('Falha na reindexa√ß√£o de marcadores'),
          backup,
          rollback: () => this.executeRollback(backup, editor, setReferenceMapping),
          rollbackExecuted: rollbackSuccess,
          operationId
        };
      }
      
      // 3. Aplicar mudan√ßas no editor
      console.log('üìù Aplicando mudan√ßas no editor...');
      const editorSuccess = this.applyReindexingToEditor(editor, reindexResult.newContent, reindexResult.reindexingMap);
      
      if (!editorSuccess) {
        console.error('‚ùå Falha ao aplicar mudan√ßas no editor - executando rollback');
        
        const rollbackSuccess = this.executeRollback(backup, editor, setReferenceMapping);
        
        return {
          success: false,
          error: new Error('Falha ao aplicar mudan√ßas no editor'),
          backup,
          rollback: () => this.executeRollback(backup, editor, setReferenceMapping),
          rollbackExecuted: rollbackSuccess,
          operationId
        };
      }
      
      // 4. Atualizar referenceMapping
      console.log('üó∫Ô∏è Atualizando referenceMapping...');
      let newReferenceMapping;
      try {
        newReferenceMapping = this.updateReferenceMapping(referenceMapping, reindexResult.reindexingMap);
        if (setReferenceMapping && typeof setReferenceMapping === 'function') {
          setReferenceMapping(newReferenceMapping);
        }
      } catch (mappingError) {
        console.error('‚ùå Falha ao atualizar referenceMapping - executando rollback');
        
        const rollbackSuccess = this.executeRollback(backup, editor, setReferenceMapping);
        
        return {
          success: false,
          error: mappingError,
          backup,
          rollback: () => this.executeRollback(backup, editor, setReferenceMapping),
          rollbackExecuted: rollbackSuccess,
          operationId
        };
      }
      
      // 5. Validar integridade p√≥s-reindexa√ß√£o
      console.log('üîç Validando integridade p√≥s-reindexa√ß√£o...');
      const validation = this.validatePostReindexingIntegrity(
        reindexResult.newContent, 
        newReferenceMapping, 
        reindexResult.reindexingMap
      );
      
      // 6. Verificar se valida√ß√£o passou ou se deve fazer rollback
      if (!validation.isValid && validation.errors.length > 0) {
        console.error('‚ùå Valida√ß√£o p√≥s-reindexa√ß√£o falhou - executando rollback');
        console.error('‚ùå Erros de valida√ß√£o:', validation.errors);
        
        const rollbackSuccess = this.executeRollback(backup, editor, setReferenceMapping);
        
        return {
          success: false,
          error: new Error(`Valida√ß√£o falhou: ${validation.errors.join(', ')}`),
          backup,
          rollback: () => this.executeRollback(backup, editor, setReferenceMapping),
          rollbackExecuted: rollbackSuccess,
          validation,
          operationId
        };
      }
      
      // 7. Sucesso - retornar resultado com capacidade de rollback
      console.log('‚úÖ Reindexa√ß√£o conclu√≠da com sucesso');
      
      return {
        success: true,
        result: {
          ...reindexResult,
          newReferenceMapping,
          validation
        },
        backup,
        rollback: () => this.executeRollback(backup, editor, setReferenceMapping),
        validation,
        operationId
      };
      
    } catch (error) {
      console.error('‚ùå Erro cr√≠tico durante reindexa√ß√£o com error handling:', error);
      
      // Tentar rollback mesmo em caso de erro cr√≠tico
      try {
        const backup = this.createStateBackup(editor, referenceMapping, operationId);
        const rollbackSuccess = this.executeRollback(backup, editor, setReferenceMapping);
        
        return {
          success: false,
          error,
          backup,
          rollback: () => this.executeRollback(backup, editor, setReferenceMapping),
          rollbackExecuted: rollbackSuccess,
          operationId
        };
      } catch (rollbackError) {
        console.error('‚ùå Erro cr√≠tico tamb√©m no rollback:', rollbackError);
        
        return {
          success: false,
          error,
          rollbackError,
          operationId
        };
      }
    }
  }

  /**
   * M√©todo principal com sistema completo de error handling, rollback e recupera√ß√£o
   * @param {string} editorContent - Conte√∫do atual do editor
   * @param {InsertionContext} insertionContext - Contexto da inser√ß√£o
   * @param {Object} editor - Inst√¢ncia do editor
   * @param {Map} referenceMapping - Mapeamento atual t√≠tulo ‚Üî marcador
   * @param {Function} setReferenceMapping - Fun√ß√£o para atualizar referenceMapping
   * @param {Object} options - Op√ß√µes de configura√ß√£o
   * @returns {RollbackableResult} Resultado completo com todas as funcionalidades
   */
  static executeReindexingWithFullErrorHandling(editorContent, insertionContext, editor, referenceMapping, setReferenceMapping, options = {}) {
    const operationId = `full_reindex_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    try {
      console.log('üõ°Ô∏è Executando reindexa√ß√£o com sistema completo de error handling');
      console.log(`üÜî ID da opera√ß√£o: ${operationId}`);
      
      const {
        enableAutoRecovery = true,
        strictValidation = true,
        preserveFunctionality = true,
        maxRetryAttempts = 2
      } = options;
      
      let attempt = 0;
      let lastError = null;
      
      while (attempt <= maxRetryAttempts) {
        try {
          console.log(`üîÑ Tentativa ${attempt + 1}/${maxRetryAttempts + 1}`);
          
          // Executar reindexa√ß√£o com error handling b√°sico
          const result = this.reindexWithErrorHandling(
            editorContent, 
            insertionContext, 
            editor, 
            referenceMapping, 
            setReferenceMapping
          );
          
          if (result.success) {
            // Valida√ß√£o adicional com recupera√ß√£o autom√°tica se habilitada
            if (enableAutoRecovery) {
              console.log('üîç Executando valida√ß√£o com recupera√ß√£o autom√°tica...');
              
              const recoveryResult = this.validateWithAutoRecovery(
                result.result.newContent,
                result.result.newReferenceMapping,
                { 
                  attemptAutoFix: true, 
                  strictMode: strictValidation,
                  maxFixAttempts: 3
                }
              );
              
              if (recoveryResult.autoRecoveryUsed) {
                console.log('üîß Recupera√ß√£o autom√°tica aplicada');
                
                // Aplicar corre√ß√µes se necess√°rio
                if (recoveryResult.finalContent !== result.result.newContent) {
                  this.applyReindexingToEditor(editor, recoveryResult.finalContent, []);
                }
                
                if (recoveryResult.finalMapping !== result.result.newReferenceMapping) {
                  setReferenceMapping(recoveryResult.finalMapping);
                }
                
                // Atualizar resultado com corre√ß√µes
                result.result.newContent = recoveryResult.finalContent;
                result.result.newReferenceMapping = recoveryResult.finalMapping;
                result.autoRecoveryApplied = recoveryResult.fixesApplied;
              }
              
              result.validation = recoveryResult;
            }
            
            console.log('‚úÖ Reindexa√ß√£o conclu√≠da com sucesso (com error handling completo)');
            
            return {
              ...result,
              operationId,
              attempt: attempt + 1,
              totalAttempts: maxRetryAttempts + 1,
              errorHandlingLevel: 'full'
            };
          }
          
          lastError = result.error;
          console.warn(`‚ö†Ô∏è Tentativa ${attempt + 1} falhou:`, result.error.message);
          
          // Se n√£o √© a √∫ltima tentativa, aguardar um pouco antes de tentar novamente
          if (attempt < maxRetryAttempts) {
            console.log('‚è≥ Aguardando antes da pr√≥xima tentativa...');
            // Usar setTimeout s√≠ncrono para evitar async/await
            const delay = 100 * (attempt + 1);
            const start = Date.now();
            while (Date.now() - start < delay) {
              // Busy wait para simular delay
            }
          }
          
        } catch (attemptError) {
          lastError = attemptError;
          console.error(`‚ùå Erro na tentativa ${attempt + 1}:`, attemptError);
        }
        
        attempt++;
      }
      
      // Todas as tentativas falharam
      console.error('‚ùå Todas as tentativas de reindexa√ß√£o falharam');
      
      if (preserveFunctionality) {
        console.log('üõ°Ô∏è Preservando funcionalidade b√°sica...');
        
        const fallbackState = this.preserveBasicFunctionality(lastError, {
          editor,
          referenceMapping,
          editorContent,
          insertionContext
        });
        
        return {
          success: false,
          error: lastError,
          fallbackState,
          operationId,
          totalAttempts: attempt,
          errorHandlingLevel: 'full',
          functionalityPreserved: true
        };
      }
      
      return {
        success: false,
        error: lastError,
        operationId,
        totalAttempts: attempt,
        errorHandlingLevel: 'full',
        functionalityPreserved: false
      };
      
    } catch (criticalError) {
      console.error('‚ùå Erro cr√≠tico no sistema de error handling completo:', criticalError);
      
      if (preserveFunctionality) {
        const fallbackState = this.preserveBasicFunctionality(criticalError, {
          editor,
          referenceMapping,
          editorContent,
          insertionContext
        });
        
        return {
          success: false,
          error: criticalError,
          fallbackState,
          operationId,
          errorHandlingLevel: 'critical_failure',
          functionalityPreserved: true
        };
      }
      
      return {
        success: false,
        error: criticalError,
        operationId,
        errorHandlingLevel: 'critical_failure',
        functionalityPreserved: false
      };
    }
  }
}

export default MarkerReindexingService;